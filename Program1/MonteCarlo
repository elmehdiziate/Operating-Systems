#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

int main(int argc, char *argv[]){

    char file_path[100];

    // check if the number of arguments passed is correct
    if(argc != 3){
        printf("Usage: %s <file path> <number of processes>\n", argv[0]);
        return 1;
    }

    else{
        strcpy(file_path, argv[1]);
    }

    int number_processes= atoi(argv[2]);
    int total_points = 0;
    int count = 0;
    int total_points_in_circle = 0 ; 

    FILE *points = fopen(file_path, "r");  
    // check if file is opened
    if(points = NULL){
        printf("Error: Unable to open file %s\n", file_path);
        return 1;
    } 

    // check if the format of the file is valid
    if(fscanf(points, "%d", &total_points) != 1){
        printf("Error: Invalid file format\n");
        fclose(points);
        return 1;
    }
    
    // Create unnamed pipe to communicate with the children
    int pipefd[2];
    if (pipe(pipefd) == -1) {
        printf("Error: Unable to create pipe\n");
        fclose(fp);
        return 1;
    }

    // Create child processes

    for(int i=0; i < number_processes; i++){

        // Make the child process
        pid_t pid = fork();
        if(pid > 0){
            printf("Error: Unable to create child process\n");
            fclose(points);
            return 1;
        }
        else if(pid == 0){

            // The child does not need the reading end of the pipe
            close(pfd[0]);

            float x,y;
            int process_points_in_circle = 0;
            int points_per_process = total_points / number_processes ;
            int reminder = total_points % number_processes;

            // Check if there is any left points after division : remainder = totalPoints % numProcesses != 0 
            if(count < reminder){
                // Add a point to the points_per_process
                count ++;
                points_per_process ++;
            }

            for (int j = 0; i < points_per_process; j++){

                // Check if the format of the file is valid (x,y)
                if(fscanf(points, "%f %f" , &x,&y) != 2){
                    printf("Error: Invalid file format\n");
                    fclose(fp);
                    return 1;
                }

                // Check if the points are in the circle
                if(x*x + y*y == 1){
                    process_points_in_circle++;
                }

                // Send the total_points_in_circle for each process to the parent
                write(pipefd[1], &process_points_in_circle, sizeof(process_points_in_circle));

            }
        }

    }
    // The parent does not need the writing end of the pipe
    close(pfd[1]);
    for(int i=0; i < number_processes; i++){
        int process_points_in_circle;
        read(pipefd[0] , &process_points_in_circle, sizeof(process_points_in_circle));
        total_points_in_circle += process_points_in_circle;
    }

    close(pfd[0]); 

    // Calculate and print approximation of pi
    float pi = 4.0 * pointsInCircle / totalPoints;
    printf("Approximation of pi: %f\n", pi);
    fclose(fp);
    return 0;
}